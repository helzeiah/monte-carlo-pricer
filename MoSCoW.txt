* Summary

Helzeiah Oliveira
-------------------------
Solo Project - ~12 hours
-- Option class 2 hours
-- MonteCarlo class 4-5
-- Pricer interface 1-2
-- Option/Monte Carlo updates 1-2
-- Greeks half hour

This project implements a Monte Carlo simulation engine for pricing European
financial options. Using geometric Brownian motion to model stock price movements,
it estimates a fit price for an option by simulating thousands of possible future price paths
and calculating the average discounted payoff. This implementation includes
professional risk metrics such as confidence intervals and Value at Risk (VaR), and easy-to-follow
documentation and code making it good for both educational purposes and real financial analysis. :)

* Progress

Must
[x] Pricer base class
[x] MonteCarlo inherits from pricer
[x] Pure virtual function
[x] Overridden function
[x] Polymorphic function call
[x] << Overloading x2
[x] another overload (== for options)
[x] static function
[x] friend function
[x] Basic Option class to store option parameters
[x] Monte Carlo simulation class for option pricing
[x] Calculate price for European Call and Put options using Monte Carlo method
[x] Error handling for invalid inputs
[x] Geometric Brownian Motion simulation for stock paths
[x] Payoff calculation for both call and put options

Should
[x] Greeks calculation
[x] Standard error calculate for price estimates
[x] 95% confidence intervals for statistical analysis
[x] Value at Risk (VaR) calculation for risk management
[x] Ability to run additional simulations
[x] Performance timing and monitoring
[x] Result caching to avoid recalculations
[x] Reproducible results with a seed
[ ] Add additional pricing engines that inherit from pricer

Could
[ ] StockPath class for path-dependent options
[ ] Portfolio managment class
[ ] Multiple option types (American, Exotic, etc)
[ ] Variance reduction

Won't
[ ] Use real time market data
[ ] GUI
[ ] Machine learning models
[ ] Web API / network connectivity
[ ] Database storage
